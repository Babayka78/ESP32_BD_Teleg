# bot_handler.py

import logging
from datetime import datetime, timezone
from pymongo import MongoClient
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
try:
    client = MongoClient('mongodb://mdbesp:27017', serverSelectionTimeoutMS=5000)
    db = client['temperature_monitoring']
    subscribers_collection = db['telegram_subscribers']
except Exception as err:
    logger.error(f"Failed to connect to MongoDB: {err}")
    raise

def create_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    start_button = KeyboardButton('üü¢ Start')
    stop_button = KeyboardButton('üî¥ Stop')
    keyboard.add(start_button, stop_button)
    return keyboard

def init_subscriber_collection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        if 'telegram_subscribers' not in db.list_collection_names():
            subscribers_collection.create_index([("chat_id", 1)], unique=True)
    except Exception as er:
        logger.error(f"Failed to initialize subscriber collection: {er}")

@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        chat_id = message.chat.id
        user_name = message.from_user.username or message.from_user.first_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_subscriber = subscribers_collection.find_one({"chat_id": chat_id})

        if existing_subscriber and existing_subscriber.get('is_active', False):
            bot.reply_to(
                message,
                "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ! üå°",
                reply_markup=create_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        subscriber_data = {
            "chat_id": chat_id,
            "username": user_name,
            "is_active": True,
            "subscribed_at": datetime.now(timezone.utc),
            "last_updated": datetime.now(timezone.utc)
        }

        subscribers_collection.update_one(
            {"chat_id": chat_id},
            {"$set": subscriber_data},
            upsert=True
        )

        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.\n"
            "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Stop –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop"
        )
        bot.reply_to(message, welcome_message, reply_markup=create_keyboard())
        logger.info(f"New subscriber added: {chat_id} ({user_name})")

    except Exception as er:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        bot.reply_to(message, error_message, reply_markup=create_keyboard())
        logger.error(f"Error in handle_start: {er}")

@bot.message_handler(commands=['stop'])
def handle_stop(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop"""
    try:
        chat_id = message.chat.id
        user_name = message.from_user.username or message.from_user.first_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        subscriber = subscribers_collection.find_one({"chat_id": chat_id})

        if not subscriber or not subscriber.get('is_active', False):
            bot.reply_to(
                message,
                "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ü§î",
                reply_markup=create_keyboard()
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscribers_collection.update_one(
            {"chat_id": chat_id},
            {
                "$set": {
                    "is_active": False,
                    "last_updated": datetime.now(timezone.utc)
                }
            }
        )

        goodbye_message = (
            f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}! üëã\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        bot.reply_to(message, goodbye_message, reply_markup=create_keyboard())
        logger.info(f"Subscriber deactivated: {chat_id} ({user_name})")

    except Exception as er:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        bot.reply_to(message, error_message, reply_markup=create_keyboard())
        logger.error(f"Error in handle_stop: {er}")

@bot.message_handler(func=lambda message: message.text in ['üü¢ Start', 'üî¥ Stop'])
def handle_button_click(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if message.text == 'üü¢ Start':
        handle_start(message)
    elif message.text == 'üî¥ Stop':
        handle_stop(message)

def get_active_subscribers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        active_subscribers = subscribers_collection.find({"is_active": True})
        return [subscriber["chat_id"] for subscriber in active_subscribers]
    except Exception as er:
        logger.error(f"Error getting active subscribers: {er}")
        return []

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        init_subscriber_collection()
        logger.info("Telegram bot started...")
        bot.polling(none_stop=True)
    except Exception as er:
        logger.error(f"Error running bot: {er}")